/* 
A window function performs a calculation across a set of table rows that are somehow related to the current row.
This is comparable to the type of calculation that can be done with an aggregate function.
But unlike regular aggregate functions, use of a window function does not cause rows to become grouped into a single output row â€” the rows retain their separate identities.
Behind the scenes, the window function is able to access more than just the current row of the query result.
 */



SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;
  
depname  | empno | salary |          avg          
-----------+-------+--------+-----------------------
 develop   |    11 |   5200 | 5020.0000000000000000
 develop   |     7 |   4200 | 5020.0000000000000000
 develop   |     9 |   4500 | 5020.0000000000000000
 develop   |     8 |   6000 | 5020.0000000000000000
 develop   |    10 |   5200 | 5020.0000000000000000
 personnel |     5 |   3500 | 3700.0000000000000000
 personnel |     2 |   3900 | 3700.0000000000000000
 sales     |     3 |   4800 | 4866.6666666666666667
 sales     |     1 |   5000 | 4866.6666666666666667
 sales     |     4 |   4800 | 4866.6666666666666667


The first three output columns come directly from the table empsalary, and there is one output row for each row in the table. 
The fourth column represents an average taken across all the table rows that have the same depname value as the current row. 

(This actually is the same function as the regular avg aggregate function, but the OVER clause causes it to be treated as a window function and computed across an appropriate set of rows.)

A window function call always contains an OVER clause directly following the window function's name and argument(s). 
This is what syntactically distinguishes it from a regular function or aggregate function.
 The OVER clause determines exactly how the rows of the query are split up for processing by the window function. 
 The PARTITION BY list within OVER specifies dividing the rows into groups, or partitions, that share the same values of the PARTITION BY expression(s). 
 For each row, the window function is computed across the rows that fall into the same partition as the current row.
You can also control the order in which rows are processed by window functions using ORDER BY within OVER.
 (The window ORDER BY does not even have to match the order in which the rows are output.) Here is an example: